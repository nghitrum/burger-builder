{"version":3,"sources":["components/Burger/BurgerIngredient/BurgerIngredient.module.css","components/Layout/Layout.module.css","components/Burger/Burger.module.css","components/Layout/index.js","components/Burger/BurgerIngredient/index.js","components/Burger/index.js","containers/BurgerBuilder/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Layout","props","className","classes","Content","children","BurgerIngredient","ingredient","type","BreadBottom","BreadTop","Seeds1","Meat","Salad","Bacond","Cheese","Burger","BurderBuilder","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wGACAA,EAAOC,QAAU,CAAC,YAAc,sCAAsC,SAAW,mCAAmC,OAAS,iCAAiC,OAAS,iCAAiC,KAAO,+BAA+B,OAAS,iCAAiC,MAAQ,gCAAgC,MAAQ,kC,sBCAxUD,EAAOC,QAAU,CAAC,QAAU,0B,gBCA5BD,EAAOC,QAAU,CAAC,OAAS,yB,mLCWZC,EATA,SAACC,GACf,OACC,kBAAC,WAAD,KACC,8DACA,0BAAMC,UAAWC,IAAQC,SAAUH,EAAMI,Y,gBCmC7BC,EAtCU,SAACL,GACzB,IAAIM,EAAa,KAEjB,OAAQN,EAAMO,MACb,IAAK,eACJD,EAAa,yBAAKL,UAAWC,IAAQM,cACrC,MACD,IAAK,YACJF,EACC,yBAAKL,UAAWC,IAAQO,UACvB,yBAAKR,UAAWC,IAAQQ,SACxB,yBAAKT,UAAWC,IAAQQ,UAG1B,MACD,IAAK,OACJJ,EAAa,yBAAKL,UAAWC,IAAQS,OACrC,MACD,IAAK,QACJL,EAAa,yBAAKL,UAAWC,IAAQU,QACrC,MACD,IAAK,QACJN,EAAa,yBAAKL,UAAWC,IAAQW,SACrC,MACD,IAAK,SACJP,EAAa,yBAAKL,UAAWC,IAAQY,SAMvC,OAAOR,G,gBCpBOS,EAXA,SAACf,GACf,OACC,yBAAKC,UAAWC,IAAQa,QACvB,kBAAC,EAAD,CAAkBR,KAAK,cACvB,kBAAC,EAAD,CAAkBA,KAAK,WACvB,kBAAC,EAAD,CAAkBA,KAAK,SACvB,kBAAC,EAAD,CAAkBA,KAAK,mBCIXS,E,uKATb,OACC,kBAAC,WAAD,KACC,kBAAC,EAAD,MACA,mD,GALwBC,aCabC,E,uKAVb,OACC,6BACC,kBAAC,EAAD,KACC,kBAAC,EAAD,Y,GALaD,aCQEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2d4cb002.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"BreadBottom\":\"BurgerIngredient_BreadBottom__2US69\",\"BreadTop\":\"BurgerIngredient_BreadTop__3Y4-R\",\"Seeds1\":\"BurgerIngredient_Seeds1__J6vUJ\",\"Seeds2\":\"BurgerIngredient_Seeds2__2Ylex\",\"Meat\":\"BurgerIngredient_Meat__3flwI\",\"Cheese\":\"BurgerIngredient_Cheese__3rOTJ\",\"Salad\":\"BurgerIngredient_Salad__KLnhy\",\"Bacon\":\"BurgerIngredient_Bacon__1KK6n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Content\":\"Layout_Content__2WLOk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Burger\":\"Burger_Burger__10T8F\"};","import React, { Fragment } from 'react';\nimport classes from './Layout.module.css';\n\nconst Layout = (props) => {\n\treturn (\n\t\t<Fragment>\n\t\t\t<div>Toolbar, SideDrawer, BackDrop</div>\n\t\t\t<main className={classes.Content}>{props.children}</main>\n\t\t</Fragment>\n\t);\n};\n\nexport default Layout;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classes from './BurgerIngredient.module.css';\n\nconst BurgerIngredient = (props) => {\n\tlet ingredient = null;\n\n\tswitch (props.type) {\n\t\tcase 'bread-bottom':\n\t\t\tingredient = <div className={classes.BreadBottom}></div>;\n\t\t\tbreak;\n\t\tcase 'bread-top':\n\t\t\tingredient = (\n\t\t\t\t<div className={classes.BreadTop}>\n\t\t\t\t\t<div className={classes.Seeds1}></div>\n\t\t\t\t\t<div className={classes.Seeds1}></div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t\tbreak;\n\t\tcase 'meat':\n\t\t\tingredient = <div className={classes.Meat}></div>;\n\t\t\tbreak;\n\t\tcase 'salad':\n\t\t\tingredient = <div className={classes.Salad}></div>;\n\t\t\tbreak;\n\t\tcase 'bacon':\n\t\t\tingredient = <div className={classes.Bacond}></div>;\n\t\t\tbreak;\n\t\tcase 'cheese':\n\t\t\tingredient = <div className={classes.Cheese}></div>;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t}\n\n\treturn ingredient;\n};\n\nBurgerIngredient.propTypes = {\n\ttype: PropTypes.string.isRequired\n};\n\nexport default BurgerIngredient;\n","import React from 'react';\nimport BurgerIngredient from './BurgerIngredient';\nimport classes from './Burger.module.css';\n\nconst Burger = (props) => {\n\treturn (\n\t\t<div className={classes.Burger}>\n\t\t\t<BurgerIngredient type=\"bread-top\" />\n\t\t\t<BurgerIngredient type=\"cheese\" />\n\t\t\t<BurgerIngredient type=\"neat\" />\n\t\t\t<BurgerIngredient type=\"bread-bottom\" />\n\t\t</div>\n\t);\n};\n\nexport default Burger;\n","import React, { Component, Fragment } from 'react';\nimport Burger from '../../components/Burger';\n\nclass BurderBuilder extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<Fragment>\n\t\t\t\t<Burger />\n\t\t\t\t<div>Build Control</div>\n\t\t\t</Fragment>\n\t\t);\n\t}\n}\n\nexport default BurderBuilder;\n","import React, { Component } from 'react';\nimport Layout from './components/Layout';\nimport BurderBuilder from './containers/BurgerBuilder';\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Layout>\n\t\t\t\t\t<BurderBuilder />\n\t\t\t\t</Layout>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}